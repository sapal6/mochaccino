# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_frappe.suite.ipynb (unless otherwise specified).

__all__ = ['Callback', 'Describe', 'It']

# Cell
from contextlib import ContextDecorator

# Cell
@funcs_kwargs(as_method=True)
class Callback(Stateful,GetAttr):
    "Basic class handling tweaks of the runner"
    _methods = _events

    def __init__(self, **kwargs): assert not kwargs, f'Passed unknown events: {kwargs}'
    def __repr__(self): return type(self).__name__

    def __call__(self, event_name):
        "Call `self.{event_name}` if it's defined"
        res = getattr(self, event_name, noop)()
        return res

    def __setattr__(self, name, value):
        super().__setattr__(name, value)

    @property
    def name(self):
        "Name of the `Callback`, camel-cased and with '*Callback*' removed"
        return class2attr(self, 'Callback')

# Cell
class Describe(ContextDecorator):
    "contextmanager to describe a test suite"
    def __init__(self, desc): store_attr('desc', self)

    def __enter__(self):
        "start the execution of the suite and do setup"
        print(self.desc)
        return self
    #TODO: create callbacks to check type, value,traceback and format report and termnial display
    def __exit__(self, type, value, traceback):
        "cleanup and exit the suite"
        print(f'{self.desc} completed')
        #print(type, value, traceback, sep="\n")
        return True

# Cell
class It(ContextDecorator):
    "contextmanager to describe a test function"
    def __init__(self, desc): store_attr('desc', self)

    def __enter__(self):
        "start the execution of the test"
        print(self.desc)
        return self
    #TODO: create callbacks to check type, value,traceback and format report and termnial display
    def __exit__(self, type, value, traceback):
        "cleanup and exit the test"
        print(f'{self.desc} completed')
        #print(type, value, traceback, sep="\n")
        return True